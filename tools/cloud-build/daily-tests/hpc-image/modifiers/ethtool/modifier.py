# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or
# https://www.apache.org/licenses/LICENSE-2.0> or the MIT license
# <LICENSE-MIT or https://opensource.org/licenses/MIT>, at your
# option. This file may not be copied, modified, or distributed
# except according to those terms.

from ramble.modkit import *  # noqa: F403

class Ethtool(BasicModifier):
    """Define a modifier for lspcu

    lscpu gives useful information about the underlying compute platform. This
    modifier allows experiments to easily extract system information while the
    experiment is being performed.
    """
    name = "ethtool"

    tags('system-info', 'sysinfo', 'platform-info')

    maintainers('carsondunbar')

    mode('standard', description='Tests for hpc-image VM validation')
    default_mode('standard')

    section_list = {"S": [
        "rx_packets",
        "tx_packets",
        "rx_bytes",
        "tx_bytes",
        "rx_dropped",
        "tx_dropped",
        "tx_timeouts",
        "rx_skb_alloc_fail",
        "rx_buf_alloc_fail",
        "rx_desc_err_dropped_pkt",
        "interface_up_cnt",
        "interface_down_cnt",
        "reset_cnt",
        "page_alloc_fail",
        "dma_mapping_error",
        "stats_report_trigger_cnt",
        "rx_posted_desc[0]",
        "rx_completed_desc[0]",
        "rx_consumed_desc[0]",
        "rx_bytes[0]",
        "rx_cont_packet_cnt[0]",
        "rx_frag_flip_cnt[0]",
        "rx_frag_copy_cnt[0]",
        "rx_frag_alloc_cnt[0]",
        "rx_dropped_pkt[0]",
        "rx_copybreak_pkt[0]",
        "rx_copied_pkt[0]",
        "rx_queue_drop_cnt[0]",
        "rx_no_buffers_posted[0]",
        "rx_drops_packet_over_mru[0]",
        "rx_drops_invalid_checksum[0]",
        "rx_posted_desc[1]",
        "rx_completed_desc[1]",
        "rx_consumed_desc[1]",
        "rx_bytes[1]",
        "rx_cont_packet_cnt[1]",
        "rx_frag_flip_cnt[1]",
        "rx_frag_copy_cnt[1]",
        "rx_frag_alloc_cnt[1]",
        "rx_dropped_pkt[1]",
        "rx_copybreak_pkt[1]",
        "rx_copied_pkt[1]",
        "rx_queue_drop_cnt[1]",
        "rx_no_buffers_posted[1]",
        "rx_drops_packet_over_mru[1]",
        "rx_drops_invalid_checksum[1]",
        "rx_posted_desc[2]",
        "rx_completed_desc[2]",
        "rx_consumed_desc[2]",
        "rx_bytes[2]",
        "rx_cont_packet_cnt[2]",
        "rx_frag_flip_cnt[2]",
        "rx_frag_copy_cnt[2]",
        "rx_frag_alloc_cnt[2]",
        "rx_dropped_pkt[2]",
        "rx_copybreak_pkt[2]",
        "rx_copied_pkt[2]",
        "rx_queue_drop_cnt[2]",
        "rx_no_buffers_posted[2]",
        "rx_drops_packet_over_mru[2]",
        "rx_drops_invalid_checksum[2]",
        "rx_posted_desc[3]",
        "rx_completed_desc[3]",
        "rx_consumed_desc[3]",
        "rx_bytes[3]",
        "rx_cont_packet_cnt[3]",
        "rx_frag_flip_cnt[3]",
        "rx_frag_copy_cnt[3]",
        "rx_frag_alloc_cnt[3]",
        "rx_dropped_pkt[3]",
        "rx_copybreak_pkt[3]",
        "rx_copied_pkt[3]",
        "rx_queue_drop_cnt[3]",
        "rx_no_buffers_posted[3]",
        "rx_drops_packet_over_mru[3]",
        "rx_drops_invalid_checksum[3]",
        "rx_posted_desc[4]",
        "rx_completed_desc[4]",
        "rx_consumed_desc[4]",
        "rx_bytes[4]",
        "rx_cont_packet_cnt[4]",
        "rx_frag_flip_cnt[4]",
        "rx_frag_copy_cnt[4]",
        "rx_frag_alloc_cnt[4]",
        "rx_dropped_pkt[4]",
        "rx_copybreak_pkt[4]",
        "rx_copied_pkt[4]",
        "rx_queue_drop_cnt[4]",
        "rx_no_buffers_posted[4]",
        "rx_drops_packet_over_mru[4]",
        "rx_drops_invalid_checksum[4]",
        "rx_posted_desc[5]",
        "rx_completed_desc[5]",
        "rx_consumed_desc[5]",
        "rx_bytes[5]",
        "rx_cont_packet_cnt[5]",
        "rx_frag_flip_cnt[5]",
        "rx_frag_copy_cnt[5]",
        "rx_frag_alloc_cnt[5]",
        "rx_dropped_pkt[5]",
        "rx_copybreak_pkt[5]",
        "rx_copied_pkt[5]",
        "rx_queue_drop_cnt[5]",
        "rx_no_buffers_posted[5]",
        "rx_drops_packet_over_mru[5]",
        "rx_drops_invalid_checksum[5]",
        "rx_posted_desc[6]",
        "rx_completed_desc[6]",
        "rx_consumed_desc[6]",
        "rx_bytes[6]",
        "rx_cont_packet_cnt[6]",
        "rx_frag_flip_cnt[6]",
        "rx_frag_copy_cnt[6]",
        "rx_frag_alloc_cnt[6]",
        "rx_dropped_pkt[6]",
        "rx_copybreak_pkt[6]",
        "rx_copied_pkt[6]",
        "rx_queue_drop_cnt[6]",
        "rx_no_buffers_posted[6]",
        "rx_drops_packet_over_mru[6]",
        "rx_drops_invalid_checksum[6]",
        "rx_posted_desc[7]",
        "rx_completed_desc[7]",
        "rx_consumed_desc[7]",
        "rx_bytes[7]",
        "rx_cont_packet_cnt[7]",
        "rx_frag_flip_cnt[7]",
        "rx_frag_copy_cnt[7]",
        "rx_frag_alloc_cnt[7]",
        "rx_dropped_pkt[7]",
        "rx_copybreak_pkt[7]",
        "rx_copied_pkt[7]",
        "rx_queue_drop_cnt[7]",
        "rx_no_buffers_posted[7]",
        "rx_drops_packet_over_mru[7]",
        "rx_drops_invalid_checksum[7]",
        "rx_posted_desc[8]",
        "rx_completed_desc[8]",
        "rx_consumed_desc[8]",
        "rx_bytes[8]",
        "rx_cont_packet_cnt[8]",
        "rx_frag_flip_cnt[8]",
        "rx_frag_copy_cnt[8]",
        "rx_frag_alloc_cnt[8]",
        "rx_dropped_pkt[8]",
        "rx_copybreak_pkt[8]",
        "rx_copied_pkt[8]",
        "rx_queue_drop_cnt[8]",
        "rx_no_buffers_posted[8]",
        "rx_drops_packet_over_mru[8]",
        "rx_drops_invalid_checksum[8]",
        "rx_posted_desc[9]",
        "rx_completed_desc[9]",
        "rx_consumed_desc[9]",
        "rx_bytes[9]",
        "rx_cont_packet_cnt[9]",
        "rx_frag_flip_cnt[9]",
        "rx_frag_copy_cnt[9]",
        "rx_frag_alloc_cnt[9]",
        "rx_dropped_pkt[9]",
        "rx_copybreak_pkt[9]",
        "rx_copied_pkt[9]",
        "rx_queue_drop_cnt[9]",
        "rx_no_buffers_posted[9]",
        "rx_drops_packet_over_mru[9]",
        "rx_drops_invalid_checksum[9]",
        "rx_posted_desc[10]",
        "rx_completed_desc[10]",
        "rx_consumed_desc[10]",
        "rx_bytes[10]",
        "rx_cont_packet_cnt[10]",
        "rx_frag_flip_cnt[10]",
        "rx_frag_copy_cnt[10]",
        "rx_frag_alloc_cnt[10]",
        "rx_dropped_pkt[10]",
        "rx_copybreak_pkt[10]",
        "rx_copied_pkt[10]",
        "rx_queue_drop_cnt[10]",
        "rx_no_buffers_posted[10]",
        "rx_drops_packet_over_mru[10]",
        "rx_drops_invalid_checksum[10]",
        "rx_posted_desc[11]",
        "rx_completed_desc[11]",
        "rx_consumed_desc[11]",
        "rx_bytes[11]",
        "rx_cont_packet_cnt[11]",
        "rx_frag_flip_cnt[11]",
        "rx_frag_copy_cnt[11]",
        "rx_frag_alloc_cnt[11]",
        "rx_dropped_pkt[11]",
        "rx_copybreak_pkt[11]",
        "rx_copied_pkt[11]",
        "rx_queue_drop_cnt[11]",
        "rx_no_buffers_posted[11]",
        "rx_drops_packet_over_mru[11]",
        "rx_drops_invalid_checksum[11]",
        "rx_posted_desc[12]",
        "rx_completed_desc[12]",
        "rx_consumed_desc[12]",
        "rx_bytes[12]",
        "rx_cont_packet_cnt[12]",
        "rx_frag_flip_cnt[12]",
        "rx_frag_copy_cnt[12]",
        "rx_frag_alloc_cnt[12]",
        "rx_dropped_pkt[12]",
        "rx_copybreak_pkt[12]",
        "rx_copied_pkt[12]",
        "rx_queue_drop_cnt[12]",
        "rx_no_buffers_posted[12]",
        "rx_drops_packet_over_mru[12]",
        "rx_drops_invalid_checksum[12]",
        "rx_posted_desc[13]",
        "rx_completed_desc[13]",
        "rx_consumed_desc[13]",
        "rx_bytes[13]",
        "rx_cont_packet_cnt[13]",
        "rx_frag_flip_cnt[13]",
        "rx_frag_copy_cnt[13]",
        "rx_frag_alloc_cnt[13]",
        "rx_dropped_pkt[13]",
        "rx_copybreak_pkt[13]",
        "rx_copied_pkt[13]",
        "rx_queue_drop_cnt[13]",
        "rx_no_buffers_posted[13]",
        "rx_drops_packet_over_mru[13]",
        "rx_drops_invalid_checksum[13]",
        "rx_posted_desc[14]",
        "rx_completed_desc[14]",
        "rx_consumed_desc[14]",
        "rx_bytes[14]",
        "rx_cont_packet_cnt[14]",
        "rx_frag_flip_cnt[14]",
        "rx_frag_copy_cnt[14]",
        "rx_frag_alloc_cnt[14]",
        "rx_dropped_pkt[14]",
        "rx_copybreak_pkt[14]",
        "rx_copied_pkt[14]",
        "rx_queue_drop_cnt[14]",
        "rx_no_buffers_posted[14]",
        "rx_drops_packet_over_mru[14]",
        "rx_drops_invalid_checksum[14]",
        "rx_posted_desc[15]",
        "rx_completed_desc[15]",
        "rx_consumed_desc[15]",
        "rx_bytes[15]",
        "rx_cont_packet_cnt[15]",
        "rx_frag_flip_cnt[15]",
        "rx_frag_copy_cnt[15]",
        "rx_frag_alloc_cnt[15]",
        "rx_dropped_pkt[15]",
        "rx_copybreak_pkt[15]",
        "rx_copied_pkt[15]",
        "rx_queue_drop_cnt[15]",
        "rx_no_buffers_posted[15]",
        "rx_drops_packet_over_mru[15]",
        "rx_drops_invalid_checksum[15]",
        "tx_posted_desc[0]",
        "tx_completed_desc[0]",
        "tx_consumed_desc[0]",
        "tx_bytes[0]",
        "tx_wake[0]",
        "tx_stop[0[",
        "tx_event_counter[0[",
        "tx_dma_mapping_error[0[",
        "tx_posted_desc[1[",
        "tx_completed_desc[1[",
        "tx_consumed_desc[1[",
        "tx_bytes[1]",
        "tx_wake[1]",
        "tx_stop[1]",
        "tx_event_counter[1]",
        "tx_dma_mapping_error[1]",
        "tx_posted_desc[2]",
        "tx_completed_desc[2]",
        "tx_consumed_desc[2]",
        "tx_bytes[2]",
        "tx_wake[2]",
        "tx_stop[2]",
        "tx_event_counter[2]",
        "tx_dma_mapping_error[2]",
        "tx_posted_desc[3]",
        "tx_completed_desc[3]",
        "tx_consumed_desc[3]",
        "tx_bytes[3]",
        "tx_wake[3]",
        "tx_stop[3]",
        "tx_event_counter[3]",
        "tx_dma_mapping_error[3]",
        "tx_posted_desc[4]",
        "tx_completed_desc[4]",
        "tx_consumed_desc[4]",
        "tx_bytes[4]",
        "tx_wake[4]",
        "tx_stop[4]",
        "tx_event_counter[4]",
        "tx_dma_mapping_error[4]",
        "tx_posted_desc[5]",
        "tx_completed_desc[5]",
        "tx_consumed_desc[5]",
        "tx_bytes[5]",
        "tx_wake[5]",
        "tx_stop[5]",
        "tx_event_counter[5]",
        "tx_dma_mapping_error[5]",
        "tx_posted_desc[6]",
        "tx_completed_desc[6]",
        "tx_consumed_desc[6]",
        "tx_bytes[6]",
        "tx_wake[6]",
        "tx_stop[6]",
        "tx_event_counter[6]",
        "tx_dma_mapping_error[6]",
        "tx_posted_desc[7]",
        "tx_completed_desc[7]",
        "tx_consumed_desc[7]",
        "tx_bytes[7]",
        "tx_wake[7]",
        "tx_stop[7]",
        "tx_event_counter[7]",
        "tx_dma_mapping_error[7]",
        "tx_posted_desc[8]",
        "tx_completed_desc[8]",
        "tx_consumed_desc[8]",
        "tx_bytes[8]",
        "tx_wake[8]",
        "tx_stop[8]",
        "tx_event_counter[8]",
        "tx_dma_mapping_error[8]",
        "tx_posted_desc[9]",
        "tx_completed_desc[9]",
        "tx_consumed_desc[9]",
        "tx_bytes[9]",
        "tx_wake[9]",
        "tx_stop[9]",
        "tx_event_counter[9]",
        "tx_dma_mapping_error[9]",
        "tx_posted_desc[10]",
        "tx_completed_desc[10]",
        "tx_consumed_desc[10]",
        "tx_bytes[10]",
        "tx_wake[10]",
        "tx_stop[10]",
        "tx_event_counter[10]",
        "tx_dma_mapping_error[10]",
        "tx_posted_desc[11]",
        "tx_completed_desc[11]",
        "tx_consumed_desc[11]",
        "tx_bytes[11]",
        "tx_wake[11]",
        "tx_stop[11]",
        "tx_event_counter[11]",
        "tx_dma_mapping_error[11]",
        "tx_posted_desc[12]",
        "tx_completed_desc[12]",
        "tx_consumed_desc[12]",
        "tx_bytes[12]",
        "tx_wake[12]",
        "tx_stop[12]",
        "tx_event_counter[12]",
        "tx_dma_mapping_error[12]",
        "tx_posted_desc[13]",
        "tx_completed_desc[13]",
        "tx_consumed_desc[13]",
        "tx_bytes[13]",
        "tx_wake[13]",
        "tx_stop[13]",
        "tx_event_counter[13]",
        "tx_dma_mapping_error[13]",
        "tx_posted_desc[14]",
        "tx_completed_desc[14]",
        "tx_consumed_desc[14]",
        "tx_bytes[14]",
        "tx_wake[14]",
        "tx_stop[14]",
        "tx_event_counter[14]",
        "tx_dma_mapping_error[14]",
        "tx_posted_desc[15]",
        "tx_completed_desc[15]",
        "tx_consumed_desc[15]",
        "tx_bytes[15]",
        "tx_wake[15]",
        "tx_stop[15]",
        "tx_event_counter[15]",
        "tx_dma_mapping_error[15]",
        "adminq_prod_cnt",
        "adminq_cmd_fail",
        "adminq_timeouts",
        "adminq_describe_device_cnt",
        "adminq_cfg_device_resources_cnt",
        "adminq_register_page_list_cnt",
        "adminq_unregister_page_list_cnt",
        "adminq_create_tx_queue_cnt",
        "adminq_create_rx_queue_cnt",
        "adminq_destroy_tx_queue_cnt",
        "adminq_destroy_rx_queue_cnt",
        "adminq_dcfg_device_resources_cnt",
        "adminq_set_driver_parameter_cnt",
        "adminq_report_stats_cnt",
        "adminq_report_link_speed_cnt"
    ], "i" : [
        "driver",
        "version",
        "firmware-version",
        "expansion-rom-version",
        "bus-info",
        "supports-statistics",
        "supports-test",
        "supports-eeprom-access",
        "supports-register-dump",
        "supports-priv-flags"
    ], "l" : [
        "RX",
        "TX",
        "Other",
        "Combined"
    ], "c" : [
        "Adaptive RX",
        "TX"
        "stats-block-usecs",
        "sample-interval",
        "pkt-rate-low",
        "pkt-rate-high",
        "rx-usecs",
        "rx-frames",
        "rx-usecs-irq",
        "rx-frames-irq",
        "tx-usecs",
        "tx-frames",
        "tx-usecs-irq",
        "tx-frames-irq",
        "rx-usecs-low",
        "rx-frame-low",
        "tx-usecs-low",
        "tx-frame-low",
        "rx-usecs-high",
        "rx-frame-high",
        "tx-usecs-high",
        "tx-frame-high",
        "CQE mode RX",
        "TX",
        "tx-aggr-max-bytes",
        "tx-aggr-max-frames",
        "tx-aggr-time-usecs",
    ], "k" : [
        "rx-checksumming",
        "tx-checksumming",
        "tx-checksum-ipv4",
        "tx-checksum-ip-generic",
        "tx-checksum-ipv6",
        "tx-checksum-fcoe-crc",
        "tx-checksum-sctp",
        "scatter-gather",
        "tx-scatter-gather",
        "tx-scatter-gather-fraglist",
        "tcp-segmentation-offload",
        "tx-tcp-segmentation",
        "tx-tcp-ecn-segmentation",
        "tx-tcp-mangleid-segmentation",
        "tx-tcp6-segmentation",
        "generic-segmentation-offload",
        "generic-receive-offload",
        "large-receive-offload",
        "rx-vlan-offload",
        "tx-vlan-offload",
        "ntuple-filters",
        "receive-hashing",
        "highdma",
        "rx-vlan-filter",
        "vlan-challenged",
        "tx-lockless",
        "netns-local",
        "tx-gso-robust",
        "tx-fcoe-segmentation",
        "tx-gre-segmentation",
        "tx-gre-csum-segmentation",
        "tx-ipxip4-segmentation",
        "tx-ipxip6-segmentation",
        "tx-udp_tnl-segmentation",
        "tx-udp_tnl-csum-segmentation",
        "tx-gso-partial",
        "tx-tunnel-remcsum-segmentation",
        "tx-sctp-segmentation",
        "tx-esp-segmentation",
        "tx-udp-segmentation",
        "tx-gso-list",
        "fcoe-mtu",
        "tx-nocache-copy",
        "loopback",
        "rx-fcs",
        "rx-all",
        "tx-vlan-stag-hw-insert",
        "rx-vlan-stag-hw-parse",
        "rx-vlan-stag-filter",
        "l2-fwd-offload",
        "hw-tc-offload",
        "esp-hw-offload",
        "esp-tx-csum-hw-offload",
        "rx-udp_tunnel-port-offload",
        "tls-hw-tx-offload",
        "tls-hw-rx-offload",
        "rx-gro-hw",
        "tls-hw-record",
        "rx-gro-list",
        "macsec-hw-offload",
        "rx-udp-gro-forwarding",
        "hsr-tag-ins-offload",
        "hsr-tag-rm-offload",
        "hsr-fwd-offload",
        "hsr-dup-offload"
    ]}

    for k, v in section_list.items():
        log_name = f'ethtool_{k}_output.log'
        log_var = f'ethtool_{k}_log'
        usage = f'ethtool -{k}'
        figure_of_merit_context(usage, regex="", output_format=usage)
        variable_modification(log_var, '{experiment_run_dir}' + f'/{log_name}', method='set', modes=['standard'])
        for section in v:
            figure_of_merit(section, fom_regex=r'\s*' + f'{section}'.replace('[', r'\[').replace(']', r'\]') + r'[:\s]+(?P<fom>.*)',
                            group_name='fom', units='', log_file='{' + log_var + '}', contexts=[usage])
  
    archive_pattern('ethtool_*_output.log')
    register_builtin(f'ethtool_exec', injection_method='append')

    def ethtool_exec(self):
        return [f'ethtool -{k} eth0 >> ' + '{ethtool_log}' for k in self.section_list.keys()]